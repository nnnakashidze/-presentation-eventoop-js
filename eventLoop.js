//  Event Loop არის JavaScript-ის მთავარი მექანიზმი ასინქრონულობისთვის.

// JavaScript  ერთდროულად მხოლოდ ერთ ოპერაციას ასრულებს. ყველა კოდი მოდის ერთმანეთის შემდეგ.
// რაც შეეხება setTimeout ან promise ისინი  გადადიან ცალკე რიგში და არ სრულდებიან ეგრევე.

// JavaScript-ის ასრულებასში მონაწილეობს 3 მთავარი ნაწილი:

// 1.  Call Stack — აქ გადის ყველა ჩვეულებრივი კოდი (console.log, ფუნქციების გამოძახება და ა.შ.)
// 2.  Web APIs — ეს ბრაუზერის ნაწილია. მაგალითად setTimeout, fetch და ა.შ.
// 3.  Callback Queue —  (Task Queue)

// პლიუს Microtask Queue (მაგალითად: Promises)

// მოდი ვნახოთ მარტივი მაგალითით როგორ მუშაობს ეს მექანიზმი:

console.log("1"); // ჩვეულებრივი კოდია და შესრულდება ეგრევე.

setTimeout(() => {
  console.log("2"); // გადადის გვერდით რიგში და "იცდის".
}, 0);

Promise.resolve().then(() => {
  console.log("3"); // ესეც გადადის გვერდით, მაგრამ უფრო სწრაფი რიგია.
});

console.log("4"); // ეგრევე შესრულდება, ჩვეულებრივად.

// შედეგი კონსოლში იქნება:
// 1
// 4
// 3
// 2

// ახსნა:
//  1 და 4 — ჩვეულებრივი კოდია.
//  3 — მოდის Promise-დან და აქვს პრიორიტეტი.
//  2 — მოდის setTimeout-იდან და ბოლოს მოდის.

// ამას ყველაფერს აკონტროლებს Event Loop.
// რომელიც ამოწმებს ჯერ ჩვეულებრივ კოდს, მერე Promises, მერე setTimeout-ებს.
